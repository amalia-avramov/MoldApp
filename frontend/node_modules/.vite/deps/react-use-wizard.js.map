{
  "version": 3,
  "sources": ["../../react-use-wizard/src/wizardContext.ts", "../../react-use-wizard/src/useWizard.ts", "../../react-use-wizard/src/logger.ts", "../../react-use-wizard/src/wizard.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { WizardValues } from './types';\n\nconst WizardContext = React.createContext<WizardValues | null>(null);\n\nif (__DEV__) {\n  WizardContext.displayName = 'WizardContext';\n}\n\nexport default WizardContext;\n", "import * as React from 'react';\n\nimport { WizardValues } from './types';\nimport WizardContext from './wizardContext';\n\nconst useWizard = () => {\n  const context = React.useContext(WizardContext);\n\n  if (!context && __DEV__) {\n    throw Error('Wrap your step with `Wizard`');\n  } else {\n    return context as WizardValues;\n  }\n};\n\nexport default useWizard;\n", "import { LogLevel } from './types';\n/**\n * Log messages in the console with a corresponding urgency\n *\n * @param level The urgency of the message\n * @param message The message to log in the console\n */\nexport const log = (level: LogLevel, message: string) => {\n  if (__DEV__) {\n    const packageName = '[react-use-wizard]';\n\n    switch (level) {\n      case 'warn':\n        console.warn(`${packageName} ${message}`);\n        break;\n      case 'error':\n        console.error(`${packageName} ${message}`);\n        break;\n      default:\n        console.log(`${packageName} ${message}`);\n    }\n  }\n};\n", "import * as React from 'react';\n\nimport * as logger from './logger';\nimport { Handler, WizardProps } from './types';\nimport WizardContext from './wizardContext';\n\nconst Wizard: React.FC<React.PropsWithChildren<WizardProps>> = React.memo(\n  ({ header, footer, children, wrapper: Wrapper, startIndex = 0 }) => {\n    const [activeStep, setActiveStep] = React.useState(startIndex);\n    const [isLoading, setIsLoading] = React.useState(false);\n    const hasNextStep = React.useRef(true);\n    const hasPreviousStep = React.useRef(false);\n    const nextStepHandler = React.useRef<Handler>(() => {});\n    const stepCount = React.Children.toArray(children).length;\n\n    hasNextStep.current = activeStep < stepCount - 1;\n    hasPreviousStep.current = activeStep > 0;\n\n    const goToNextStep = React.useRef(() => {\n      if (hasNextStep.current) {\n        setActiveStep((activeStep) => activeStep + 1);\n      }\n    });\n\n    const goToPreviousStep = React.useRef(() => {\n      if (hasPreviousStep.current) {\n        nextStepHandler.current = null;\n        setActiveStep((activeStep) => activeStep - 1);\n      }\n    });\n\n    const goToStep = React.useRef((stepIndex: number) => {\n      if (stepIndex >= 0 && stepIndex < stepCount) {\n        nextStepHandler.current = null;\n        setActiveStep(stepIndex);\n      } else {\n        if (__DEV__) {\n          logger.log(\n            'warn',\n            [\n              `Invalid step index [${stepIndex}] passed to 'goToStep'. `,\n              `Ensure the given stepIndex is not out of boundaries.`,\n            ].join(''),\n          );\n        }\n      }\n    });\n\n    // Callback to attach the step handler\n    const handleStep = React.useRef((handler: Handler) => {\n      nextStepHandler.current = handler;\n    });\n\n    const doNextStep = React.useRef(async () => {\n      if (hasNextStep.current && nextStepHandler.current) {\n        try {\n          setIsLoading(true);\n          await nextStepHandler.current();\n          setIsLoading(false);\n          nextStepHandler.current = null;\n          goToNextStep.current();\n        } catch (error) {\n          setIsLoading(false);\n          throw error;\n        }\n      } else {\n        goToNextStep.current();\n      }\n    });\n\n    const wizardValue = React.useMemo(\n      () => ({\n        nextStep: doNextStep.current,\n        previousStep: goToPreviousStep.current,\n        handleStep: handleStep.current,\n        isLoading,\n        activeStep,\n        stepCount,\n        isFirstStep: !hasPreviousStep.current,\n        isLastStep: !hasNextStep.current,\n        goToStep: goToStep.current,\n      }),\n      [activeStep, stepCount, isLoading],\n    );\n\n    const activeStepContent = React.useMemo(() => {\n      const reactChildren = React.Children.toArray(children);\n\n      if (__DEV__) {\n        // No steps passed\n        if (reactChildren.length === 0) {\n          logger.log(\n            'warn',\n            'Make sure to pass your steps as children in your <Wizard>',\n          );\n        }\n        // The passed start index is invalid\n        if (activeStep > reactChildren.length) {\n          logger.log('warn', 'An invalid startIndex is passed to <Wizard>');\n        }\n        // Invalid header element\n        if (header && !React.isValidElement(header)) {\n          logger.log('error', 'Invalid header passed to <Wizard>');\n        }\n        // Invalid footer element\n        if (footer && !React.isValidElement(footer)) {\n          logger.log('error', 'Invalid footer passed to <Wizard>');\n        }\n      }\n\n      return reactChildren[activeStep];\n    }, [activeStep, children, header, footer]);\n\n    const enhancedActiveStepContent = React.useMemo(\n      () =>\n        Wrapper\n          ? React.cloneElement(Wrapper, { children: activeStepContent })\n          : activeStepContent,\n      [Wrapper, activeStepContent],\n    );\n\n    return (\n      <WizardContext.Provider value={wizardValue}>\n        {header}\n        {enhancedActiveStepContent}\n        {footer}\n      </WizardContext.Provider>\n    );\n  },\n);\n\nexport default Wizard;\n"],
  "mappings": "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",
  "names": ["WizardContext", "React", "displayName", "useWizard", "context", "Error", "log", "level", "message", "packageName", "console", "warn", "error", "Wizard", "header", "footer", "children", "wrapper", "Wrapper", "startIndex", "activeStep", "setActiveStep", "isLoading", "setIsLoading", "hasNextStep", "hasPreviousStep", "nextStepHandler", "stepCount", "toArray", "length", "current", "goToNextStep", "goToPreviousStep", "goToStep", "stepIndex", "logger", "join", "handleStep", "handler", "doNextStep", "wizardValue", "nextStep", "previousStep", "isFirstStep", "isLastStep", "activeStepContent", "reactChildren", "enhancedActiveStepContent", "Provider", "value"]
}
